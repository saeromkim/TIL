슬라이드 파일 : https://www.acmicpc.net/group/files/4586
동영상 : code.plus
질문 : question.startlink.help


- 테스트케이스가 많은 경우는 독립적으로 출력하기
- 뒤에 연습문제는 언어에 자신이 없으면 풀기
- 슬라이드를 미리 올려주는데, 문제만 읽고 오기 
- 복습은 중요하므로 문제 다시 한번 스스로 풀어보고 코딩하기
- 복습은 길게보고 천천히하기 

## 스택
- 포인터를 쓸 일은 없다
- linked list를 쓸 일이 없고, 배열을 이용해서 구현한다.


#### 괄호
- 닫는 괄호에 대해 대응하는 여는 괄호가 존재하는 지?
- 스택의 맨위에 있는 것을 탐색에서 가장 가까운 짝이 맞는 닫는괄호를 찾는다
- 여는 괄호가 있으면 push 닫는 괄호가 나타나면 pop
- 각각의 글자마다 push/pop 시간 복잡도 : O(N)
- 스택이 비어있지 않은 경우에만 
- 이 문제는 계단으로 변형될 수도 있는 중요한 예시 문제다
- 스택의 성질을 쓰지, 스택을 쓰진 않는다. count 를 +1/-1해주면서...
```c
#include <iostream>
using namespace std;
int main(){
  int n;
  cin >> n;
  for (int i=0; i<n; i++){
    string s;
    while(s.empty()){
      if(s=="("){
        cnt+=1;
      }else {
        cnt-=1;
      }
    }
  }
}
```
#### 에디터
- 길이가 n인 문자열의 중간에 문자열을 추가하는 것은 O(n)이 걸린다.
- 커서를 기준으로 문자가 추가/삭제 된다.
## 큐
- BFS할때만 거의 사용되고 슬라이드에 있는 문제는 억지로 쓴 것이다.
## 덱
- 양 끝에서 push/pop이 가능
- 큐와 스택 모두 만들 수 있음
- BFS할때 잠깐 쓰고, 덱을 사용하는 경우는 아주 드물다
## 아스키 코드
- 문자'0' => 48
## 단어 길이 재기
- 맞는데 시간초과의 큰 원인은 이 경우
- 맞는데 틀린경우는 그냥 틀린경우
## 다이나믹 프로그래밍
- 그래프와 함께 가장 중요한 챕터 중 하나
- 큰 문제를 작은 문제로 나눠서 푸는 알고리즘 (재귀적, 크고 작음은 상대적)
- 중복을 제거하는 것이 핵심
- 다이나믹 처럼 작은 문제를 나누는 것이 분할 정복
- 정답을 구했으면 어딘가에 메모한다 (Memoization = cache)
#### 예시 : 피보나치 수
- 점화식  Fn= Fn-1 + Fn-2 (n ≥ 2)
- 시간복잡도 O(2^n) 하나가 두개, 두개는 네개 호출...

- 탑다운, 바텀업 두 가지 방법 중 하나만 잘하면 된다.
- 둘 중 어느 방법을 쓰든지 상관없다. 
### 다이나믹 문제 풀이 전략
- 점화식의 정의를 세우는 것(한국어로)을 목표로 한 후 식을 먼저 세운다.
- 난이도랑 문제 풀이는 의미가 없다.

#### 1로 만들기
- 9 3 1 /2번
- 5 4 2 1 /3번
- 10 5 -> /1+3 4번 
- 10 9 -> /1+2 3번
- 10 안에 5,9 작은문제를 이용
- 하나의 기준만 적용하는 것(바로 다음 단계만 보고 판단하는 것)을 그리디알고리즘이라고 하는데 어렵다.(그방법이 반드시 정답이라는 것을 증명해야하기 때문)
- 점화식이 바로 나오면 쉬운 문제라고 생각하면 됨
- N을 1로 만드는 최소 연산 횟수

- 다이나믹을 공부할 때는 코드보다 점화식을 세우는 과정을 이해하는 것이 매우 중요하다.
#### 2*n 타일링
- 마지막 한단계만 생각해야 한다 (예를 들어 마지막에 세로블럭 2개를 사용하는 것은 두단계이기 때문에 중복이 발생한다)
#### 1,2,4 더하기
- 제일 마지막에 더하는 값이 1,2,3이 올경우 3가지로 나눌 수 있다.
- d[0]=1 공집합도 집합 하나이다. 0이 나오는 방법은 하나이다.
#### 위 문제들의 공통점은 가장 마지막 단계는 뭘 사용해야하는가에 집중했다.
- 문제마다 점화식이 다르다. 점화식만 만들줄 알면 문제들이 다 똑같아보인다ㅋㅋ
#### 카드 구매하기
#### 카드 구매하기2
- 위 문제에서 max를 min으로 바꾼다.

### 다음 시간은 다이나믹을 계속한다. 
### 점화식에서 변형을 주는 문제들이 나온다. 1,2,3 더하기 5부터~


